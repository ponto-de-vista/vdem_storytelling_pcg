# -*- coding: utf-8 -*-
"""Geopolitics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/119GjEAiUOrNCgLB0m1h-JD8oR9oomqEC

<h1><strong>Integrantes do grupo</strong></h1>

<h2></h2>

<ul>
<li>Bryan Pinheiro de Souza</li>
<li>Fernando Costa Okada Ferreira</li>
<li>Leonardo Vitor Alves Fonseca</li>
<li>Murilo Folkowski</li>
</ul>
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import plotly.express as px

path =  './ert.csv';

"""#**Mapa interativo: índices de tipo de governo**
"""

df = pd.read_csv(path)

selected_columns = [
    "country_id",
    "country_name",
    "v2x_polyarchy",
    "year",
    "v2x_regime"
]

df = df[selected_columns]

plotly_df = df[["country_name", "year", "v2x_regime"]].copy()

fig = px.choropleth(plotly_df,
                    locations="country_name",
                    locationmode='country names',
                    color="v2x_regime",
                    hover_name="country_name",
                    hover_data=["v2x_regime"],
                    animation_frame="year",
                    color_continuous_scale="rdylbu",
                    height=600
                   )

fig.update_layout(
    geo=dict(
        showcoastlines=True,
        coastlinecolor="Black",
        showland=True,
        landcolor="lightgrey",
        showocean=False,
        oceancolor="lightblue",
        showlakes=False, lakecolor="lightblue",
        showrivers=False, rivercolor="lightblue"
    ),
    margin={"r":0,"t":40,"l":0,"b":0}
)
fig.show()

"""#**Gráfico de linhas: distribuição de regimes no mundo**

"""

mapeamento_regime = {
    0: 'Autocracia Fechada',
    1: 'Autocracia Eleitoral',
    2: 'Democracia Eleitoral',
    3: 'Democracia Liberal'
}

df_regimes_count = df.groupby(['year', 'v2x_regime']).size().reset_index(name='count')

df_regimes_count['regime_label'] = df_regimes_count['v2x_regime'].map(mapeamento_regime)

fig_line = px.line(df_regimes_count,
                   x="year",
                   y="count",
                   color="regime_label",
                   title="Número de países por tipo de regime ao longo do tempo",
                   labels={"year": "Ano", "count": "Número de países", "regime_label": "Tipo de Regime"},
                   )

fig_line.update_layout(xaxis_title="Ano",
                       yaxis_title="Número de países",
                       legend_title="Tipo de Regime")

fig_line.show()

"""#**Gráfico de linha: poliarquia brasileira ao decorrer do tempo**

"""

import matplotlib.pyplot as plt
import numpy as np
df_brazil = df[df['country_name'] == 'Brazil'].copy()

df_brazil['year'] = df_brazil['year'].astype(int)

plt.figure(figsize=(12, 6))
plt.plot(df_brazil['year'], df_brazil['v2x_polyarchy'])
plt.xlabel('Ano')
plt.ylabel('Poliarquia')
plt.title('Poliarquia do Brasil ao longo do tempo')
plt.xticks(np.arange(df_brazil['year'].min(), df_brazil['year'].max() + 1, 10))
plt.grid(True)
plt.show()

"""#**Gráfico de barras: média de poliarquia por região**
"""

import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots

def load_and_filter_data(path):
    selected_columns = [
        "country_id",
        "country_name",
        "v2x_polyarchy",
        "year",
        "v2x_regime"
    ]
    df = pd.read_csv(path)
    return df[selected_columns]

def define_regions():
    return {
        "América": [
            'Mexico', 'United States of America', 'Canada', 'Suriname', 'Colombia', 'Brazil', 'Argentina', 'Bolivia',
            'Chile', 'Ecuador', 'Peru', 'Venezuela', 'Uruguay', 'Guyana', 'Paraguay', 'El Salvador', 'Nicaragua',
            'Costa Rica', 'Guatemala', 'Panama', 'Haiti', 'Honduras', 'Jamaica', 'Trinidad and Tobago', 'Barbados',
            'Cuba', 'Dominican Republic', 'Bahamas'
        ],
        "Europa": [
            'Sweden', 'Switzerland', 'Albania', 'Poland', 'Portugal', 'Finland', 'Ireland', 'Italy', 'Spain', 'France',
            'Germany', 'Netherlands', 'Latvia', 'Lithuania', 'Luxembourg', 'United Kingdom', 'Austria', 'Belgium',
            'Bosnia and Herzegovina', 'Bulgaria', 'Croatia', 'Cyprus', 'Czechia', 'Denmark', 'Estonia', 'Greece',
            'Hungary', 'Iceland', 'Kosovo', 'Malta', 'Moldova', 'Montenegro', 'North Macedonia', 'Norway', 'Romania',
            'Serbia', 'Slovakia', 'Slovenia', 'Russia', 'Ukraine', 'Belarus', 'Georgia',
            'German Democratic Republic'
        ],
        "África": [
            'Ghana', 'South Africa', 'Egypt', 'Mali', 'Senegal', 'South Sudan', 'Sudan', 'Ethiopia', 'Kenya', 'Nigeria',
            'Tanzania', 'Uganda', 'Benin', 'Burkina Faso', 'Mozambique', 'Niger', 'Zambia', 'Zimbabwe', 'Guinea',
            'Ivory Coast', 'Mauritania', 'Botswana', 'Burundi', 'Cape Verde', 'Central African Republic', 'Cameroon',
            'Chad', 'Democratic Republic of the Congo', 'Republic of the Congo', 'Djibouti', 'Eritrea', 'Gabon',
            'The Gambia', 'Guinea-Bissau', 'Liberia', 'Malawi', 'Morocco', 'Rwanda', 'Somalia', 'Eswatini', 'Togo',
            'Lesotho', 'Sierra Leone', 'Algeria', 'Angola', 'Comoros', 'Equatorial Guinea', 'Madagascar', 'Mauritius',
            'Namibia', 'Sao Tome and Principe', 'Seychelles', 'Libya', 'Tunisia',
            'Somaliland'
        ],
        "Ásia": [
            'Japan', 'Burma/Myanmar', 'Afghanistan', 'Bangladesh', 'Pakistan', 'India', 'North Korea', 'South Korea',
            'Vietnam', 'Taiwan', 'Thailand', 'Philippines', 'Malaysia', 'Indonesia', 'Nepal', 'Cambodia', 'Laos',
            'Mongolia', 'Maldives', 'Sri Lanka', 'Timor-Leste', 'Palestine/West Bank', 'Palestine/Gaza', 'Tajikistan',
            'Turkmenistan', 'Uzbekistan', 'Kazakhstan', 'Kyrgyzstan', 'Armenia', 'Azerbaijan', 'China', 'Hong Kong',
            'Israel', 'Kuwait', 'Qatar', 'Bahrain', 'Oman', 'Bhutan', 'Singapore', 'Saudi Arabia', 'Iran', 'Iraq',
            'Jordan', 'Lebanon', 'Syria', 'United Arab Emirates', 'Yemen', 'Turkey','Republic of Vietnam', 'South Yemen',
            'Palestine/British Mandate'
        ],
        "Oceania": [
            'Australia', 'Papua New Guinea', 'New Zealand', 'Fiji', 'Solomon Islands', 'Vanuatu'
        ]
    }

def calculate_statistics_no_mode(df, regions):
    stats = {}
    for year in sorted(df['year'].unique()):
        yearly_data = {"Region": [], "Média": [], "Mediana": []}
        df_year = df[df['year'] == year]
        for region, countries in regions.items():
            regional_df = df_year[df_year['country_name'].isin(countries)]
            if not regional_df.empty:
                yearly_data["Region"].append(region)
                yearly_data["Média"].append(regional_df['v2x_polyarchy'].mean())
                yearly_data["Mediana"].append(regional_df['v2x_polyarchy'].median())
        stats[year] = pd.DataFrame(yearly_data)
    return stats

def plot_interactive_mean_median(stats):
    years = sorted(stats.keys())

    fig = make_subplots(rows=2, cols=1, subplot_titles=["Média", "Mediana"])

    metrics = ["Média", "Mediana"]

    for i, metric in enumerate(metrics, start=1):
        for year in years:
            df = stats[year]
            visible = (year == years[0])
            fig.add_trace(
                go.Bar(
                    x=df['Region'],
                    y=df[metric],
                    name=f"{metric} {year}",
                    visible=visible,
                    showlegend=False
                ),
                row=i,
                col=1
            )

    steps = []
    n_years = len(years)
    n_metrics = len(metrics)
    for i, year in enumerate(years):
        visibility = [False] * (n_metrics * n_years)
        for j in range(n_metrics):
            visibility[i + j * n_years] = True

        step = dict(
            method="update",
            label=str(year),
            args=[{"visible": visibility}]
        )
        steps.append(step)

    sliders = [dict(
        active=0,
        currentvalue={"prefix": "Ano: "},
        pad={"t": 50},
        steps=steps
    )]

    fig.update_layout(
        sliders=sliders,
        height=600,
        title_text="v2x_polyarchy por Região sobre o Tempo (Média e Mediana)",
        yaxis=dict(range=[0, 1]),
        yaxis2=dict(range=[0, 1])
    )

    fig.show()

df = load_and_filter_data(path)
regions = define_regions()
stats_no_mode = calculate_statistics_no_mode(df, regions)
plot_interactive_mean_median(stats_no_mode)